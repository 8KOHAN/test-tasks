from aiogram import Router, F, types
from aiogram.filters import Command
from datetime import datetime, timedelta
import ast

from services.calendar import list_free_slots, create_appointment
from services.dialog_state import dialog_history, add_to_history
from services.llm_client import ask_llm
from utils.slot_parser import slots_to_text, is_valid_slot_choice
from utils.formatting import format_datetime_for_user
from utils.text_utils import normalize_text

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ–≤–Ω–æ–≥–æ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç—É –¥–ª—è fallback
with open("bot/prompts/system_prompt.txt", "r", encoding="utf-8") as f:
    SYSTEM_PROMPT_FULL = f.read()

router = Router()

@router.message(Command("booking"))
@router.message(F.text.lower() == "–∑–∞–ø–∏—Å–∞—Ç–∏—Å—è")
async def handle_booking(message: types.Message):
    user_id = message.from_user.id
    now = datetime.utcnow()

    try:
        slots = list_free_slots(
            start_iso=now.isoformat(),
            end_iso=(now + timedelta(days=3)).isoformat(),
            duration_minutes=30
        )

        if not slots:
            await message.answer("–ù–∞ –∂–∞–ª—å, –Ω–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –≤—ñ–ª—å–Ω–∏—Ö —Å–ª–æ—Ç—ñ–≤. –ù–∞–ø–∏—à—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –ø—ñ–∑–Ω—ñ—à–µ üôè")
            return

        text = slots_to_text(slots)
        add_to_history(user_id, "system", "slots:" + str(slots))
        await message.answer(text + "\n–ù–∞–ø–∏—à—ñ—Ç—å –Ω–æ–º–µ—Ä —Å–ª–æ—Ç–∞, —è–∫–∏–π –≤–∞–º –ø—ñ–¥—Ö–æ–¥–∏—Ç—å üëá")

    except Exception as e:
        print(f"[BOOKING ERROR] {e}")
        await message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ª–æ—Ç—ñ–≤ üòì")

@router.message(F.text.regexp(r"^\d+$"))
async def handle_slot_selection(message: types.Message):
    user_id = message.from_user.id
    user_text = message.text.strip()

    history = dialog_history.get(user_id, [])
    for entry in history:
        if entry["role"] == "system" and entry["content"].startswith("slots:"):
            try:
                slots = ast.literal_eval(entry["content"][6:])
                if not is_valid_slot_choice(user_text, slots):
                    await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Å–ª–æ—Ç–∞ üìã")
                    return

                idx = int(user_text) - 1
                start_iso, end_iso = slots[idx]

                create_appointment(
                    start_iso=start_iso,
                    end_iso=end_iso,
                    summary="–õ–∞–∑–µ—Ä–Ω–∞ –µ–ø—ñ–ª—è—Ü—ñ—è",
                    description=f"–ó–∞–ø–∏—Å —á–µ—Ä–µ–∑ Telegram (ID {user_id})"
                )

                formatted_time = format_datetime_for_user(start_iso)
                await message.answer(f"–ó–∞–ø–∏—Å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ ‚úÖ –ß–µ–∫–∞—î–º–æ –≤–∞—Å {formatted_time}")
                return

            except Exception as e:
                print(f"[APPOINTMENT ERROR] {e}")
                await message.answer("–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å—ñ üòî")
            return
