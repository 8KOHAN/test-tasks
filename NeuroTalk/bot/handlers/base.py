from aiogram import Router, types
from aiogram.filters import CommandStart
from datetime import datetime, timedelta

from services.openai_client import ask_gpt
from services.calendar import list_free_slots, create_appointment
from services.dialog_state import add_to_history, dialog_history
from utils.formatting import format_datetime_for_user
from utils.slot_parser import slots_to_text
from utils.text_utils import normalize_text

router = Router()

with open("bot/prompts/system_prompt.txt", "r", encoding="utf-8") as f:
    SYSTEM_PROMPT = f.read()

@router.message()
async def handle_user_message(message: types.Message):
    user_id = message.from_user.id
    user_text = normalize_text(message.text)

    # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–≤–æ–¥–∏—Ç—å –Ω–æ–º–µ—Ä —Å–ª–æ—Ç–∞
    if user_text.isdigit():
        idx = int(user_text) - 1
        history = dialog_history.get(user_id, [])
        for entry in history:
            if entry["role"] == "system" and entry["content"].startswith("slots:"):
                try:
                    slots = eval(entry["content"][6:])
                    if 0 <= idx < len(slots):
                        start_iso, end_iso = slots[idx]
                        create_appointment(
                            start_iso=start_iso,
                            end_iso=end_iso,
                            summary="–õ–∞–∑–µ—Ä–Ω–∞ –µ–ø—ñ–ª—è—Ü—ñ—è",
                            description=f"–ó–∞–ø–∏—Å —á–µ—Ä–µ–∑ Telegram (ID {user_id})"
                        )
                        formatted_time = format_datetime_for_user(start_iso)
                        await message.answer(f"–ó–∞–ø–∏—Å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ ‚úÖ –ß–µ–∫–∞—î–º–æ –≤–∞—Å {formatted_time}")
                        return
                    else:
                        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –Ω–æ–º–µ—Ä –∑—ñ —Å–ø–∏—Å–∫—É üìã")
                        return
                except Exception as e:
                    print(f"[SLOT SELECT ERROR] {e}")
                    await message.answer("–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å—ñ üòî")
                    return

    # GPT-–æ–±—Ä–æ–±–∫–∞ ‚Äî –∑–≤–∏—á–∞–π–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    add_to_history(user_id, "user", message.text)
    history = dialog_history.get(user_id, [])
    messages = [{"role": "system", "content": SYSTEM_PROMPT}] + history

    reply = await ask_gpt(messages)
    add_to_history(user_id, "assistant", reply)
    await message.answer(reply)

    # –Ø–∫—â–æ GPT —Å–∫–∞–∑–∞–≤ "–ó–∞—Ä–∞–∑ –ø—ñ–¥–±–µ—Ä—É –¥–ª—è –≤–∞—Å –¥–æ—Å—Ç—É–ø–Ω—ñ —Å–ª–æ—Ç–∏..."
    if "–∑–∞—Ä–∞–∑ –ø—ñ–¥–±–µ—Ä—É –¥–ª—è –≤–∞—Å –¥–æ—Å—Ç—É–ø–Ω—ñ —Å–ª–æ—Ç–∏" in reply.lower():
        now = datetime.utcnow()
        try:
            slots = list_free_slots(
                start_iso=now.isoformat(),
                end_iso=(now + timedelta(days=3)).isoformat(),
                duration_minutes=30
            )
            if not slots:
                await message.answer("–ù–∞ –∂–∞–ª—å, –Ω–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –≤—ñ–ª—å–Ω–∏—Ö —Å–ª–æ—Ç—ñ–≤. –ù–∞–ø–∏—à—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –ø—ñ–∑–Ω—ñ—à–µ üôè")
                return

            text = slots_to_text(slots)

            add_to_history(user_id, "system", "slots:" + str(slots))
            await message.answer(text + "\n–ù–∞–ø–∏—à—ñ—Ç—å –Ω–æ–º–µ—Ä —Å–ª–æ—Ç–∞, —è–∫–∏–π –≤–∞–º –ø—ñ–¥—Ö–æ–¥–∏—Ç—å üëá")
        except Exception as e:
            print(f"[SLOT FETCH ERROR] {e}")
            await message.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ —Å–ª–æ—Ç—ñ–≤ üòì")
